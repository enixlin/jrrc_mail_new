下边的总结对我帮助蛮大的~不仅用法了解，整个连接流程也要明白！

原文链接地址： 
http://www.blogjava.net/supercrsky/articles/247449.html 

针对JDK中的URLConnection连接Servlet的问题,网上有虽然有所涉及,但是只是说明了某一个或几个问题，
是以FAQ的方式来解决的，而且比较零散，现在对这个类的使用就本人在项目中的使用经验做如下总结： 
1:> URL请求的类别: 
分为二类,GET与POST请求。二者的区别在于： 
     a:) get请求可以获取静态页面，也可以把参数放在URL字串后面，传递给servlet， 
     b:) post与get的不同之处在于post的参数不是放在URL字串里面，而是放在http请求的正文内。 


2:> URLConnection的对象问题: 
URLConnection的对象,如下代码示例: 

// 下面的index.jsp由<servlet-mapping>映射到 
// 一个Servlet(com.quantanetwork.getClientDataServlet) 
// 该Servlet的注意点下边会提到 


 1 URL url = new URL("http://localhost:8080/TestHttpURLConnectionPro/index.jsp");   
 2   
 3 URLConnection rulConnection = url.openConnection();  
 4         // 此处的urlConnection对象实际上是根据URL的   
 5           // 请求协议(此处是http)生成的URLConnection类   
 6           // 的子类HttpURLConnection,故此处最好将其转化   
 7           // 为HttpURLConnection类型的对象,以便用到   
 8           // HttpURLConnection更多的API.如下:   
 9    
10 HttpURLConnection httpUrlConnection = (HttpURLConnection) rulConnection;   

3:> HttpURLConnection对象参数问题 


 1  // 设置是否向httpUrlConnection输出，因为这个是post请求，参数要放在   
 2  // http正文内，因此需要设为true, 默认情况下是false;   
 3  httpUrlConnection.setDoOutput(true);   
 4   
 5  // 设置是否从httpUrlConnection读入，默认情况下是true;   
 6  httpUrlConnection.setDoInput(true);   
 7   
 8  // Post 请求不能使用缓存   
 9  httpUrlConnection.setUseCaches(false);   
10   
11  // 设定传送的内容类型是可序列化的java对象   
12  // (如果不设此项,在传送序列化对象时,当WEB服务默认的不是这种类型时可能抛java.io.EOFException)   
13  httpUrlConnection.setRequestProperty("Content-type", "application/x-java-serialized-object");   
14   
15  // 设定请求的方法为"POST"，默认是GET   
16  httpUrlConnection.setRequestMethod("POST");   
17   
18  // 连接，从上述第2条中url.openConnection()至此的配置必须要在connect之前完成，   
19          httpUrlConnection.connect();  

4:>  HttpURLConnection连接问题： 

 1 // 此处getOutputStream会隐含的进行connect(即：如同调用上面的connect()方法，   
2  // 所以在开发中不调用上述的connect()也可以)。   
3  OutputStream outStrm = httpUrlConnection.getOutputStream(); 
5:> HttpURLConnection写数据与发送数据问题： 


 1  1 // 现在通过输出流对象构建对象输出流对象，以实现输出可序列化的对象。   
 2   2  ObjectOutputStream objOutputStrm = new ObjectOutputStream(outStrm);   
 3  3   
 4  4  // 向对象输出流写出数据，这些数据将存到内存缓冲区中   
 5   5  objOutputStrm.writeObject(new String("我是测试数据"));   
 6  6   
 7  7  // 刷新对象输出流，将任何字节都写入潜在的流中（些处为ObjectOutputStream）   
 8   8  objOutputStm.flush();   
 9  9   
10  10  // 关闭流对象。此时，不能再向对象输出流写入任何数据，先前写入的数据存在于内存缓冲区中,   
11  11  // 在调用下边的getInputStream()函数时才把准备好的http请求正式发送到服务器   
12  12  objOutputStm.close();   
13  13   
14  14  // 调用HttpURLConnection连接对象的getInputStream()函数,   
15  15  // 将内存缓冲区中封装好的完整的HTTP请求电文发送到服务端。   
16  16  InputStream inStrm = httpConn.getInputStream(); // <===注意，实际发送请求的代码段就在这里   
17  17   
18 18  // 上边的httpConn.getInputStream()方法已调用,本次HTTP请求已结束,下边向对象输出流的输出已无意义，   
19 19  // 既使对象输出流没有调用close()方法，下边的操作也不会向对象输出流写入任何数据.   
20 20  // 因此，要重新发送数据时需要重新创建连接、重新设参数、重新创建流对象、重新写数据、   
21 21  // 重新发送数据(至于是否不用重新这些操作需要再研究)   
22 22  objOutputStm.writeObject(new String(""));   
23 23 httpConn.getInputStream()

总结： a:) HttpURLConnection的connect()函数，实际上只是建立了一个与服务器的tcp连接，并没有实际发送http请求。 
		无论是post还是get，http请求实际上直到HttpURLConnection的getInputStream()这个函数里面才正式发送出去。 
	  b:) 在用POST方式发送URL请求时，URL请求参数的设定顺序是重中之重， 对connection对象的一切配置（那一堆set函数） 
    都必须要在connect()函数执行之前完成。而对outputStream的写操作，又必须要在inputStream的读操作之前。 
    这些顺序实际上是由http请求的格式决定的。 
    如果inputStream读操作在outputStream的写操作之前，会抛出例外： 
    Java.net.ProtocolException: Cannot write output after reading input....... 
       
       c:) http请求实际上由两部分组成， 
    一个是http头，所有关于此次http请求的配置都在http头里面定义， 
           一个是正文content。 
    connect()函数会根据HttpURLConnection对象的配置值生成http头部信息，因此在调用connect函数之前， 
    就必须把所有的配置准备好。 
       d:) 在http头后面紧跟着的是http请求的正文，正文的内容是通过outputStream流写入的， 
    实际上outputStream不是一个网络流，充其量是个字符串流，往里面写入的东西不会立即发送到网络， 
    而是存在于内存缓冲区中，待outputStream流关闭时，根据输入的内容生成http正文。 
    至此，http请求的东西已经全部准备就绪。在getInputStream()函数调用的时候，就会把准备好的http请求 
    正式发送到服务器了，然后返回一个输入流，用于读取服务器对于此次http请求的返回信息。由于http 
    请求在getInputStream的时候已经发送出去了（包括http头和正文），因此在getInputStream()函数 
    之后对connection对象进行设置（对http头的信息进行修改）或者写入outputStream（对正文进行修改） 
    都是没有意义的了，执行这些操作会导致异常的发生。 

6:> Servlet端的开发注意点： 
a:) 对于客户端发送的POST类型的HTTP请求，Servlet必须实现doPost方法，而不能用doGet方法。 
b:) 用HttpServletRequest的getInputStream()方法取得InputStream的对象，比如： 
     InputStream inStream = httpRequest.getInputStream(); 
     现在调用inStream.available()（该方法用于“返回此输入流下一个方法调用可以不受阻塞地 
     从此输入流读取（或跳过）的估计字节数”）时，永远都反回0。试图使用此方法的返回值分配缓冲区， 
     以保存此流所有数据的做法是不正确的。那么，现在的解决办法是 
     Servlet这一端用如下实现： 
     InputStream inStream = httpRequest.getInputStream(); 
     ObjectInputStream objInStream = new ObjectInputStream(inStream); 
     Object obj = objInStream.readObject(); 
     // 做后续的处理 
     // 。。。。。。 
     // 。。。 。。。 
     而客户端，无论是否发送实际数据都要写入一个对象（那怕这个对象不用），如： 
     ObjectOutputStream objOutputStrm = new ObjectOutputStream(outStrm); 
     objOutputStrm.writeObject(new String("")); // 这里发送一个空数据 
     // 甚至可以发一个null对象，服务端取到后再做判断处理。 
     objOutputStrm.writeObject(null); 
     objOutputStrm.flush(); 
     objOutputStrm.close(); 

注意:上述在创建对象输出流ObjectOutputStream时,如果将从HttpServletRequest取得的输入流 
      (即:new ObjectOutputStream(outStrm)中的outStrm)包装在BufferedOutputStream流里面, 
      则必须有objOutputStrm.flush();这一句,以便将流信息刷入缓冲输出流.如下: 
      ObjectOutputStream objOutputStrm = new ObjectOutputStream(new BufferedOutputStream(outStrm)); 
      objOutputStrm.writeObject(null); 
      objOutputStrm.flush(); // <======此处必须要有. 
      objOutputStrm.close(); 

HttpURLConnection是基于HTTP协议的，其底层通过socket通信实现。如果不设置超时（timeout），在网络异常的情况下，可能会导致程序僵死而不继续往下执行。可以通过以下两个语句来设置相应的超时： 
System.setProperty("sun.net.client.defaultConnectTimeout", 超时毫秒数字符串); 
System.setProperty("sun.net.client.defaultReadTimeout", 超时毫秒数字符串); 


其中： sun.net.client.defaultConnectTimeout：连接主机的超时时间（单位：毫秒） 
sun.net.client.defaultReadTimeout：从主机读取数据的超时时间（单位：毫秒） 

例如： 
System.setProperty("sun.net.client.defaultConnectTimeout", "30000"); 
System.setProperty("sun.net.client.defaultReadTime 

Java中可以使用HttpURLConnection来请求WEB资源。 
HttpURLConnection对象不能直接构造，需要通过URL.openConnection()来获得HttpURLConnection对象，示例代码如下： 

1 String szUrl = "http://www.ee2ee.com/";  
2 URL url = new URL(szUrl);  
3 HttpURLConnection urlCon = (HttpURLConnection)url.openConnection();  

HttpURLConnection是基于HTTP协议的，其底层通过socket通信实现。如果不设置超时（timeout），在网络异常的情况下，可能会导致程序僵死而不继续往下执行。可以通过以下两个语句来设置相应的超时： 
System.setProperty("sun.net.client.defaultConnectTimeout", 超时毫秒数字符串); 
System.setProperty("sun.net.client.defaultReadTimeout", 超时毫秒数字符串); 


其中： sun.net.client.defaultConnectTimeout：连接主机的超时时间（单位：毫秒） 
sun.net.client.defaultReadTimeout：从主机读取数据的超时时间（单位：毫秒） 

例如： 
System.setProperty("sun.net.client.defaultConnectTimeout", "30000"); 
System.setProperty("sun.net.client.defaultReadTimeout", "30000"); 

JDK 1.5以前的版本，只能通过设置这两个系统属性来控制网络超时。在1.5中，还可以使用HttpURLConnection的父类URLConnection的以下两个方法： 
setConnectTimeout：设置连接主机超时（单位：毫秒） 
setReadTimeout：设置从主机读取数据超时（单位：毫秒） 

例如： 
1 HttpURLConnection urlCon = (HttpURLConnection)url.openConnection();  
2 urlCon.setConnectTimeout(30000);  
3 urlCon.setReadTimeout(30000); 
  


需要注意的是，笔者在JDK1.4.2环境下，发现在设置了defaultReadTimeout的情况下，如果发生网络超时，HttpURLConnection会自动重新提交一次请求，出现一次请求调用，请求服务器两次的问题（Trouble）。我认为这是JDK1.4.2的一个bug。在JDK1.5.0中，此问题已得到解决，不存在自动重发现象。out", "3000






1.使用WebView不要忘记加 <uses-permission Android:name="android.permission.INTERNET"></uses-permission>

  虽然WebView也继承自View，但它的包名是ndroid.webkit

 

 2. WebSettings ： WebView组件有一个辅助类叫WebSettings，它管理WebView的设置状态，该对象可以通过WebView.getSettings()方法获得。

//得到WebSettings对象，设置支持JavaScript的参数

webView.getSettings().setJavaScriptEnabled(true);

//设置可以支持缩放

webView.getSettings().setSupportZoom(true);

//设置默认缩放方式尺寸是far

webView.getSettings().setDefaultZoom(WebSettings.ZoomDensity.FAR);

//设置出现缩放工具

webView.getSettings().setBuiltInZoomControls(true);

 

3

WebView调用assets目录下的本地网页和图片等资源非常方便，为了让WebView从apk文件中加载assets，Android SDK提供了一个schema，前缀为file:///android_asset/。WebView遇到这样的schema，就去当前包中的assets目录中找内容，如：

webView.loadUrl(file:///android_asset/html/test1.html);

 

 

4.WebChromeClient  和 WebViewClient

与WebView相关的辅助对象，除了WebSettings还有WebChromeClient和WebViewClient。

WebViewClient主要帮助WebView处理各种通知、请求事件，如：
onLoadResource
onPageStart
onPageFinish
onReceiveError
onReceivedHttpAuthRequest

 

WebChromeClient主要辅助WebView处理Javascript的对话框、网站图标、网站title、加载进度等，如：
onCloseWindow(关闭WebView)
onCreateWindow()
onJsAlert (WebView上alert无效，需要定制WebChromeClient处理弹出)
onJsPrompt
onJsConfirm
onProgressChanged
onReceivedIcon
onReceivedTitle

 

如果只是用来处理一些html的页面内容，只用WebViewClient就行了，如果需要更丰富的处理效果，比如JS、进度条等，就要用到WebChromeClient。
 5.WebView调用js函数，并得到返回值，在android中必须注册到webView﻿中一个java对象，并在js函数执行完后，通过这个对象对应的名称调用它的方法来返回值。但是这要求html中每个将被java代码主动调用的js函数必须预先知道有这个对象注册，并且要知道它的回调函数。

这里采用把两个固定的js函数添加到html中，来辅助java代码的调用并得到返回值，这样使其它js函数不必写注册对象的回调代码：
(1)在webView的html中：
<script>
//必须添加进去的函数
function callJs(param,tag﻿)
{
var result=getCallResult(param);
javahome.handleJsResult(result,tag﻿);
}
//必须添加进去的函数
function getCallResult(param)
{
return param;
}
//这是任意函数
function fun1(param)
{
  var a=1+9;
  return param+" --  "+a;
}
</script>﻿
(2)在java类中
//把本类对象以javahome这个名称注册到webView﻿
webView﻿﻿.addJavascriptInterface(this, "javahome")﻿;
//在OnTouchListener中获取点击位置的内容﻿﻿
webView.setOnTouchListener(new View.OnTouchListener()
{
   public boolean onTouch(View v, MotionEvent event)
  {
      if(event.getAction()==MotionEvent.ACTION_UP)
     {
       Log.i("raw x,y",event.getRawX()+"   "+event.getRawY());
       Log.i("x,y",event.getX()+"   "+event.getY());
       String str=String.format("elementFromViewportPoint(%f,%f).tagName",event.getX(),event.getY());
       callJs(str,"tag21");
      }
    
    return false;
﻿  }
}﻿);
//封装一层，tag用作每次调用的标志，以便回调时辨别
public void callJs(String jsFunParam,String tag)
{
  String str=String.format("javascript:callJs(%s,'%s')",jsFunParam,tag);
  Log.i("loadUrl",str);
  webView﻿.loadUrl(str);
﻿}
//在这个方法中接收js函数调用的返回值。
public void handleJsResult(String str,String ta﻿g)
{
  Log.i("handleJsResult "+tag ,str)﻿;
﻿}
6.
 

 

 

 

 

 

 

 

 

在firefox地址栏中输入：about:config,会出现配置页面。
Chrome的网页渲染引擎也是webkit